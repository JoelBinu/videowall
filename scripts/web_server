#!/usr/bin/env python3
import argparse
import logging

from videowall.util import validate_positive_int_argument, validate_positive_float_argument, ip_from_ifname, get_ifnames
from videowall.web_server import WebServer

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Videowall web server",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('ifname', choices=get_ifnames())
    parser.add_argument('--media_path', help='Local path where the media files are located', default='~/Videos')
    parser.add_argument('--base_time_offset', help='Time between play request and the video playback. This gives '
                                                   'the clients some time to load the video',
                        type=validate_positive_float_argument, default=0.1)
    parser.add_argument('--server_web_port', help="Websocket port of the webserver",
                        type=validate_positive_int_argument, default=3000)
    parser.add_argument('--server_broadcast_port', help="Port for broadcasting the server messages",
                        type=validate_positive_int_argument, default=2000)
    parser.add_argument('--server_play_broadcast_port', help="Port for broadcasting server play messages",
                        type=validate_positive_int_argument, default=2001)
    parser.add_argument('--server_clock_port', help="Gstreamer Netclock port", type=validate_positive_int_argument,
                        default=11111)
    parser.add_argument('--server_broadcast_interval', help="How often the server sends a broadcast message",
                        type=validate_positive_float_argument, default=1)
    parser.add_argument('--client_broadcast_port', help="Port for receiving client broadcast messages",
                        type=validate_positive_int_argument, default=3000)
    parser.add_argument('--client_time_overlay', help="Whether the clients should add a time overlay to the video",
                        action='store_true')

    parser.add_argument("-v", "--verbose", help="Verbose logging", action='store_true')
    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    web_server = WebServer(args.server_web_port, args.media_path, args.base_time_offset, ip_from_ifname(args.ifname),
                           args.server_broadcast_port, args.server_play_broadcast_port, args.server_clock_port,
                           args.server_broadcast_interval, args.client_broadcast_port)
    web_server.run()
