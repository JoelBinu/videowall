#!/usr/bin/env python
import collections
import json
import logging
import os
import time
from argparse import ArgumentParser

from tqdm import tqdm
from videowall.player import get_player_platform_strings, player_platform_from_string
from videowall.server import Server
from videowall.util import validate_positive_int_argument, ip_from_ifname

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('platform', choices=get_player_platform_strings())
    parser.add_argument('ifname', choices=os.listdir('/sys/class/net/'))
    parser.add_argument('--media_path', default='~/Videos')
    parser.add_argument('--base_time_offset', type=validate_positive_int_argument, default=5000000000)
    parser.add_argument('--spin_rate', type=validate_positive_int_argument, default=5)
    parser.add_argument('--server_broadcast_port', type=validate_positive_int_argument, default=2000)
    parser.add_argument('--server_clock_port', type=validate_positive_int_argument, default=11111)
    parser.add_argument('--client_broadcast_port', type=validate_positive_int_argument, default=2001)

    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--client_config', type=json.loads, default='{}')

    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    server = Server(player_platform_from_string(args.platform), args.media_path, args.base_time_offset,
                    ip_from_ifname(args.ifname), args.server_broadcast_port, args.server_clock_port,
                    args.client_broadcast_port, args.client_config)

    filenames = collections.deque(server.get_media_filenames())

    while True:
        try:
            filename = filenames[0]
            logging.info("Playing file %s", filename)

            server.play(filename)

            with tqdm(total=server.get_duration_seconds(),
                      bar_format='Playing: {l_bar}{bar} | {n_fmt}/{total_fmt}') as progress_bar:
                while server.is_playing():
                    progress_bar.update(server.get_position_seconds() - progress_bar.n)
                    time.sleep(1. / args.spin_rate)
                    logging.debug("Clients: %s", server.get_clients())

            filenames.rotate()
        except KeyboardInterrupt:
            break

    server.close()
