#!/usr/bin/env python3
import json
import logging
import time
from argparse import ArgumentParser
from videowall.networking import NetworkingServer
from videowall.networking.message_definition import ServerPlayBroadcastMessage, ClientConfig, ServerBroadcastMessage
from videowall.util import validate_positive_int_argument

if __name__ == '__main__':
    parser = ArgumentParser()

    parser.add_argument('--filename', default='file.mp4')
    parser.add_argument('--ip', default='127.0.0.1')
    parser.add_argument('--clock_port', type=validate_positive_int_argument, default=11111)
    parser.add_argument('--server_broadcast_port', type=validate_positive_int_argument, default=2000)
    parser.add_argument('--server_play_broadcast_port', type=validate_positive_int_argument, default=2001)
    parser.add_argument('--server_broadcast_interval', type=float, default=1.0)
    parser.add_argument('--client_broadcast_port', type=validate_positive_int_argument, default=3000)
    parser.add_argument('--client_config', type=json.loads, default='{}')
    parser.add_argument('--buffer_size', type=validate_positive_int_argument, default=1024)

    args = parser.parse_args()

    logging.getLogger().setLevel(logging.DEBUG)

    logging.info("Client config: %s", args.client_config)

    server = NetworkingServer(args.server_broadcast_port, args.client_broadcast_port, args.buffer_size)
    try:
        while True:
            server.send_broadcast(ServerBroadcastMessage(
                clock_ip=args.ip,
                clock_port=args.clock_port
            ))
            server.send_play_broadcast(ServerPlayBroadcastMessage(
                filename=args.filename,
                base_time_nsecs=int(time.time() / 1e-9),
                time_overlay=True,
                client_config={ip: ClientConfig(**cfg) for ip, cfg in args.client_config.items()}
            ))
            time.sleep(args.server_broadcast_interval)
    except KeyboardInterrupt:
        server.close()
